---
- name: stopping the service if scaling down
  service:
     name: mongod
     state: stopped
  when: mongodb_configuration.conversion_enabled
  tags: ["configure" , "single_ha"]

- include_tasks: rhel_mongodb_config.yml

- include_tasks: vertical_scaling_basic.yml
  with_items: "{{ mongodb_vertical_scaling }}"
  tags: ["configure" , "single_ha"]
      
- name: reloading system daemon -single_HA
  systemd:
    daemon_reload: yes
  when: service_ha_change.changed 
  tags: ["configure" , "single_ha" , "service_file"]

- name: start mongodb service
  service:
        name: "{{ item.service_name }}"
        state: started
  with_items: "{{ mongodb_vertical_scaling }}" 
  tags: ["configure" , "single_ha" , "start_mongodb"]

- name: loading replicaset config template- single_HA
  template:
    src: replicaset.js.j2
    dest: "{{ mongodb_high_availability.replicaset_config_path }}"
    owner: "{{ mongodb_mongo.user }}"
    group: "{{ mongodb_mongo.group }}"
  tags: ["configure" , "single_ha" , "replica_set"]

- name: configuring mongodb replicaset -single_HA
  command:
      cmd: "mongo --port {{ mongodb_configuration.port }} replicaset.js"
      chdir: "{{ mongodb_installation.base_directory }}"
  tags: ["configure" , "single_ha" , "replica_set"]
  when: not mongodb_configuration.conversion_enabled

- name: configuring mongodb replicaset with user authetication -single_HA
  command:
      cmd: "mongo --port {{ mongodb_configuration.port }} -u {{ mongodb_database.configuration.user_name }} -p {{ mongodb_database.configuration.password }} {{mongodb_database.configuration.authentication_database }} replicaset.js"
      chdir: "{{ mongodb_installation.base_directory }}"
  tags: ["configure" , "single_ha" , "replica_set"]
  when: mongodb_configuration.conversion_enabled

- name: creating mongodb database user
  block:
   - name: User creation 
     mongodb_user:
       database: "{{ mongodb_database.configuration.authentication_database }}"
       name: "{{ mongodb_database.configuration.user_name }}"
       password: "{{ mongodb_database.configuration.password }}"
       roles: "{{ mongodb_database.configuration.roles }}"
       state: present
       replica_set: "{{ mongodb_high_availability.replicaset_name }}"
  rescue:
    - debug:
        msg: "User is already Created"
  tags: ["configure" , "single_ha" , "db_user_create"]

- name: creating database and db users
  mongodb_user:
    login_database: "{{ mongodb_database.configuration.authentication_database }}"
    login_user: "{{ mongodb_database.configuration.user_name }}"
    login_password: "{{ mongodb_database.configuration.password }}"
    login_port: "{{ mongodb_configuration.port }}"
    database: "{{ item.name  }}"
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    roles: "{{ item.role }}"
    replica_set: "{{ mongodb_high_availability.replicaset_name }}"
    update_password: on_create
  with_items:
    - "{{ mongodb_database.configuration.db }}"
  tags: ["configure" , "single_ha" , "db_user_create"]
  when: not mongodb_database.user_created

- name: templating all hostname to connect to the primary node
  template:
    src: connection_url.j2
    dest: /mongo/connection_url
    owner: "{{ mongodb_mongo.user }}"
    group: "{{ mongodb_mongo.group }}"
  tags: ["drop_db" , "remove_replica", "add_replica" , "never"]

- name: loading variable
  set_fact:
    temp: "{{ lookup('file', '/mongo/connection_url')}}"
  tags: ["drop_db" , "remove_replica", "add_replica", "never"]

- name: dropping database
  shell:
    cmd: "mongo -u {{ mongodb_database.configuration.user_name }} -p {{ mongodb_database.configuration.password }}  mongodb://{{ temp }}/?replicaSet={{ mongodb_high_availability.replicaset_name }} --eval \"db.getSiblingDB( '{{ item }}').dropDatabase()\" "
  with_items: "{{ mongodb_database.remove.db_name }}"
  tags: ["drop_db" , "never"]

- name: removing replicaset 
  shell:
    cmd: "mongo -u {{ mongodb_database.configuration.user_name }} -p {{ mongodb_database.configuration.password }}  mongodb://{{ temp }}/?replicaSet={{ mongodb_high_availability.replicaset_name }} --eval 'rs.remove(\"localhost:{{ item }}\")'"
  tags: ["remove_replica" , "never"]
  with_items: "{{ mongodb_high_availability.remove_replica.single_ha_ports }}"
  
- name: adding replicaset
  shell:
    cmd: "mongo -u {{ mongodb_database.configuration.user_name }} -p {{ mongodb_database.configuration.password }}  mongodb://{{ temp }}/?replicaSet={{ mongodb_high_availability.replicaset_name }} --eval 'rs.add(\"localhost:{{ item  }}\")'"
  tags: ["add_replica", "never"]
  with_items: "{{ mongodb_high_availability.add_replica.single_ha_ports }}"

